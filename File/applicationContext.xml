<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:property-placeholder location="classpath:database.properties" />
    <context:annotation-config />
    <mvc:annotation-driven conversion-service="conversionService" />


    <context:component-scan base-package="com.shanji.*" />
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp" />

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/**"/>
            <bean class="com.shanji.interceptror.RoleInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="clone">
            <property name="username" value="${database.username}" />
            <property name="password" value="${database.password}" />
            <property name="driverClassName" value="${database.driver}" />
            <property name="url" value="${database.url}" />
            <property name="filters" value="${database.filters}"/>

            <!-- 最大并发连接数 -->
            <property name="maxActive" value="${database.maxActive}"/>

            <!-- 初始化连接数量 -->
            <property name="initialSize" value="${database.initialSize}"/>

            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="${database.maxWait}"/>

            <!-- 最小空闲连接数 -->
            <property name="minIdle" value="${database.minIdle}"/>

            <!-- 最大空闲连接数 -->
            <property name="maxIdle" value="${database.maxIdle}"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="${database.timeBetweenEvictionRunsMillis}"/>

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="${database.minEvictableIdleTimeMillis}"/>

            <property name="validationQuery" value="${database.validationQuery}"/>
            <property name="testWhileIdle" value="${database.testWhileIdle}"/>
            <property name="testOnBorrow" value="${database.testOnBorrow}"/>
            <property name="testOnReturn" value="${database.testOnReturn}"/>
            <property name="maxOpenPreparedStatements" value="${database.maxOpenPreparedStatements}"/>

            <!-- 超过时间限制是否回收 -->
            <property name="removeAbandoned" value="${database.removeAbandoned}"/>

            <!-- 1800 秒，也就是 30 分钟 -->
            <property name="removeAbandonedTimeout" value="${database.removeAbandonedTimeout}"/>

            <!-- 关闭 abanded 连接时输出错误日志 -->
            <property name="logAbandoned" value="${database.logAbandoned}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:com/shanji/**/*.xml" />
    </bean>


    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shanji" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />

    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.shanji.converter.StringToRoleConverter" />
            </list>
        </property>
    </bean>

</beans>